image: git.glade.ng:5050/engineering/docker-images/infra:latest

stages:
    - review
    - deploy-terraform
    - deploy-ansible

before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export ANSIBLE_INVENTORY=./ansible_inventory.ini
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY_PRIVATE" | tr -d ' ' | base64 --decode | ssh-add -
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    

review-terraform:
    stage: review
    script:
        - cd terraform
        - terraform init
        - terraform fmt
        - terraform validate
        - terraform plan

review-ansible:
    stage: review
    script:
        - cd ansible
        - ansible-galaxy collection install ansible.posix
        - ansible-galaxy install robertdebock.logrotate
        - ansible all --list-hosts
        - ansible all -m ping --user ubuntu
        - ansible all -m setup --user ubuntu
        - ansible-playbook general-playbook.yml --check --extra-vars "gitlab_pat=$GITLAB_PAT trigger_ci_keys=$TRIGGER_CI_KEYS trigger_ci_experiment=$TRIGGER_CI_EXPERIMENT trigger_ci_production=$TRIGGER_CI_PRODUCTION trigger_ci_testing=$TRIGGER_CI_TESTING trigger_ci_staging=$TRIGGER_CI_STAGING trigger_ci_sandbox=$TRIGGER_CI_SANDBOX"
    allow_failure: true
      
deploy-terraform:
    stage: deploy-terraform
    script:
        - cd terraform
        - terraform init
        - terraform apply -auto-approve
    rules:
      - if: $DEPLOY_PRODUCTION_TERRAFORM == "1" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        when: manual


deploy-ansible:
    stage: deploy-ansible
    script:
        - cd ansible
        - ansible-galaxy collection install ansible.posix
        - ansible-galaxy install robertdebock.logrotate
        - ansible all --list-hosts
        - ansible all -m ping --user ubuntu
        - ansible all -m setup --user ubuntu
        - ansible-playbook general-playbook.yml --extra-vars "gitlab_pat=$GITLAB_PAT trigger_ci_keys=$TRIGGER_CI_KEYS trigger_ci_experiment=$TRIGGER_CI_EXPERIMENT trigger_ci_production=$TRIGGER_CI_PRODUCTION trigger_ci_testing=$TRIGGER_CI_TESTING trigger_ci_staging=$TRIGGER_CI_STAGING trigger_ci_sandbox=$TRIGGER_CI_SANDBOX"
    rules:
      - if: $DEPLOY_PRODUCTION_ANSIBLE == "1" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
        when: manual


variables:
  TF_ROOT: terraform


infracost:
  stage: review
  image:
    # Always use the latest 0.10.x version to pick up bug fixes and new resources.
    # See https://www.infracost.io/docs/integrations/cicd/#docker-images for other options
    name: infracost/infracost:ci-0.10
    entrypoint: [""] # Override since we're running commands below
  before_script:
    - echo "Hello!";
  script:
    # If you use private modules, add an environment variable or secret
    # called GIT_SSH_KEY with your private key, so Infracost can access
    # private repositories (similar to how Terraform/Terragrunt does).
    # - mkdir -p ~/.ssh
    # - eval `ssh-agent -s`
    # - echo "$GIT_SSH_KEY" | tr -d '\r' | ssh-add -
    # Update this to github.com, gitlab.com, bitbucket.org, ssh.dev.azure.com or your source control server's domain
    # - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

    # Clone the base branch of the pull request (e.g. main/master) into a temp directory.
    - git clone $CI_REPOSITORY_URL --branch=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --single-branch /tmp/base

    # Generate an Infracost cost snapshot from the comparison branch, so that Infracost can compare the cost difference.
    - |
      infracost breakdown --path=/tmp/base/${TF_ROOT} \
                          --format=json \
                          --out-file=infracost-base.json

    # Generate an Infracost diff and save it to a JSON file.
    - |
      infracost diff --path=${TF_ROOT} \
                     --compare-to=infracost-base.json \
                     --format=json \
                     --out-file=infracost.json

    # Posts a comment to the PR using the 'update' behavior.
    # This creates a single comment and updates it. The "quietest" option.
    # The other valid behaviors are:
    #   delete-and-new - Delete previous comments and create a new one.
    #   new - Create a new cost estimate comment on every push.
    # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
    - |
      infracost comment gitlab --path=infracost.json \
                               --repo=$CI_PROJECT_PATH \
                               --merge-request=$CI_MERGE_REQUEST_IID \
                               --gitlab-server-url=$CI_SERVER_URL \
                               --gitlab-token=$GITLAB_TOKEN \
                               --behavior=update
  variables:
    INFRACOST_API_KEY: $INFRACOST_API_KEY
    GITLAB_TOKEN: $GITLAB_PAT # With `api` scope to post merge request comments
    # If you're using Terraform Cloud/Enterprise and have variables or private modules stored
    # on there, you can specify the following to automatically retrieve them:
    # INFRACOST_TERRAFORM_CLOUD_TOKEN: $INFRACOST_TERRAFORM_CLOUD_TOKEN
    # INFRACOST_TERRAFORM_CLOUD_HOST: app.terraform.io
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
